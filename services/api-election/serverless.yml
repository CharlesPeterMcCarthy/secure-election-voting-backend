service: api-election-service-${self:custom.projectName}
frameworkVersion: ">=1.44.0"

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  projectName: ${file(../../serverless.common.yml):custom.projectName}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  environment:
    tableName: ${file(../../serverless.common.yml):custom.generalTableName}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-${self:custom.projectName}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-${self:custom.projectName}-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '*'

plugins:
  - serverless-offline
  - serverless-webpack

functions:
  getElectionById:
    handler: src/handler.getElectionById
    events:
      - http:
          path: /election/{electionId}
          method: get
          cors: true
  getAllElections:
    handler: src/handler.getAllElections
    events:
      - http:
          path: /election/all
          method: get
          cors: true
  getAllUpcomingElections:
    handler: src/handler.getAllUpcomingElections
    events:
      - http:
          path: /election/upcoming
          method: get
          cors: true
  getAllFinishedElections:
    handler: src/handler.getAllFinishedElections
    events:
      - http:
          path: /election/finished
          method: get
          cors: true
  getCurrentElections:
    handler: src/handler.getCurrentElections
    events:
      - http:
          path: /election/current
          method: get
          cors: true
  getElecUnregByUser:
    handler: src/handler.getAllElectionsUnregisteredByUser
    events:
      - http:
          path: /election/unregistered/{userId}/{upcoming}
          method: get
          cors: true
  getElecRegByUser:
    handler: src/handler.getAllElectionsRegisteredByUser
    events:
      - http:
          path: /election/registered/{userId}/{upcoming}
          method: get
          cors: true
  registerForElection:
    handler: src/handler.registerForElection
    events:
      - http:
          path: /election/register
          method: post
          cors: true
  unregisterForElection:
    handler: src/handler.unregisterForElection
    events:
      - http:
          path: /election/unregister
          method: put
          cors: true
  startElection:
    handler: src/handler.startElection
    events:
      - http:
          path: /election/start/{electionId}
          method: put
          cors: true
  finishElection:
    handler: src/handler.finishElection
    events:
      - http:
          path: /election/finish/{electionId}
          method: put
          cors: true
  createElection:
    handler: src/handler.createElection
    events:
      - http:
          path: /election
          method: post
          cors: true
  updateElection:
    handler: src/handler.updateElection
    events:
      - http:
          path: /election
          method: put
          cors: true
  deleteElection:
    handler: src/handler.deleteElection
    events:
      - http:
          path: /election/{electionId}
          method: delete
          cors: true

service: api-user-service-${self:custom.projectName}
frameworkVersion: ">=1.44.0"

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  projectName: ${file(../../serverless.common.yml):custom.projectName}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  environment:
    tableName: ${file(../../serverless.common.yml):custom.generalTableName}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-${self:custom.projectName}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-${self:custom.projectName}-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '*'

plugins:
  - serverless-offline
  - serverless-webpack

functions:
  getUser:
    handler: src/handler.getUser
    events:
      - http:
          path: /user/{userId}
          method: get
          cors: true
  getAllVoters:
    handler: src/handler.getAllVoters
    events:
      - http:
          path: /user/voters
          method: get
          cors: true
  createUser:
    handler: src/handler.createUser
    events:
      - http:
          path: /user
          method: post
          cors: true
  updateUser:
    handler: src/handler.updateUser
    events:
      - http:
          path: /user
          method: put
          cors: true
  deleteUser:
    handler: src/handler.deleteUser
    events:
      - http:
          path: /user/{userId}
          method: delete
          cors: true
